-- 1 - Rank the customers based on the total amount they've spent on rentals.
SELECT
    c.customer_id,
    c.first_name,
    c.last_name,
    SUM(p.amount) AS total_spent,
    RANK() OVER (ORDER BY SUM(p.amount) DESC) AS spending_rank
FROM customer c
JOIN payment p ON c.customer_id = p.customer_id
GROUP BY c.customer_id, c.first_name, c.last_name;

-- 2 - Calculate the cumulative revenue generated by each film over time.
SELECT
    f.film_id,
    f.title,
    r.rental_date,
    SUM(p.amount) OVER (
        PARTITION BY f.film_id
        ORDER BY r.rental_date
        ROWS UNBOUNDED PRECEDING
    ) AS cumulative_revenue
FROM rental r
JOIN payment p ON r.rental_id = p.rental_id
JOIN inventory i ON r.inventory_id = i.inventory_id
JOIN film f ON i.film_id = f.film_id;

-- 3 - Determine the average rental duration for each film, considering films with similar lengths.
SELECT
    f.film_id,
    f.title,
    f.length,
    AVG(f.rental_duration) OVER (
        PARTITION BY f.length
    ) AS avg_rental_duration_by_length
FROM film f;

-- 4 - Identify the top 3 films in each category based on their rental counts.
SELECT
    c.name AS category_name,
    f.title,
    COUNT(r.rental_id) AS rental_count,
    RANK() OVER (
        PARTITION BY c.category_id
        ORDER BY COUNT(r.rental_id) DESC
    ) AS category_rank
FROM rental r
JOIN inventory i ON r.inventory_id = i.inventory_id
JOIN film f ON i.film_id = f.film_id
JOIN film_category fc ON f.film_id = fc.film_id
JOIN category c ON fc.category_id = c.category_id
GROUP BY c.category_id, c.name, f.film_id, f.title
HAVING RANK() OVER (
        PARTITION BY c.category_id
        ORDER BY COUNT(r.rental_id) DESC
    ) <= 3;

-- 5 - Calculate the difference in rental counts between each customer's total rentals and the average rentals across all customers.
WITH customer_rentals AS (
    SELECT
        c.customer_id,
        c.first_name,
        c.last_name,
        COUNT(r.rental_id) AS total_rentals
    FROM customer c
    JOIN rental r ON c.customer_id = r.customer_id
    GROUP BY c.customer_id, c.first_name, c.last_name
)
SELECT
    customer_id,
    first_name,
    last_name,
    total_rentals,
    total_rentals - AVG(total_rentals) OVER () AS rentals_difference_from_avg
FROM customer_rentals;

-- 6 - Find the monthly revenue trend for the entire rental store over time.
SELECT
    DATE_FORMAT(p.payment_date, '%Y-%m') AS month,
    SUM(p.amount) AS total_revenue
FROM payment p
GROUP BY month
ORDER BY month;

-- 7 - Identify the customers whose total spending on rentals falls within the top 20% of all customers.
WITH spending AS (
    SELECT
        c.customer_id,
        c.first_name,
        c.last_name,
        SUM(p.amount) AS total_spent,
        NTILE(5) OVER (ORDER BY SUM(p.amount) DESC) AS spending_tile
    FROM customer c
    JOIN payment p ON c.customer_id = p.customer_id
    GROUP BY c.customer_id, c.first_name, c.last_name
)
SELECT
    customer_id,
    first_name,
    last_name,
    total_spent
FROM spending
WHERE spending_tile = 1;

-- 8 - Calculate the running total of rentals per category, ordered by rental count.
WITH category_rentals AS (
    SELECT
        c.category_id,
        c.name AS category_name,
        COUNT(r.rental_id) AS rental_count
    FROM rental r
    JOIN inventory i ON r.inventory_id = i.inventory_id
    JOIN film f ON i.film_id = f.film_id
    JOIN film_category fc ON f.film_id = fc.film_id
    JOIN category c ON fc.category_id = c.category_id
    GROUP BY c.category_id, c.name
)
SELECT
    category_name,
    rental_count,
    SUM(rental_count) OVER (
        ORDER BY rental_count DESC
        ROWS UNBOUNDED PRECEDING
    ) AS running_total_rentals
FROM category_rentals
ORDER BY rental_count DESC;

-- 9 - Find the films that have been rented less than the average rental count for their respective categories.
WITH film_category_counts AS (
    SELECT
        c.category_id,
        c.name AS category_name,
        f.film_id,
        f.title,
        COUNT(r.rental_id) AS rental_count,
        AVG(COUNT(r.rental_id)) OVER (
            PARTITION BY c.category_id
        ) AS avg_category_rentals
    FROM rental r
    JOIN inventory i ON r.inventory_id = i.inventory_id
    JOIN film f ON i.film_id = f.film_id
    JOIN film_category fc ON f.film_id = fc.film_id
    JOIN category c ON fc.category_id = c.category_id
    GROUP BY c.category_id, c.name, f.film_id, f.title
)
SELECT
    category_name,
    title,
    rental_count,
    avg_category_rentals
FROM film_category_counts
WHERE rental_count < avg_category_rentals;

-- 10 - Identify the top 5 months with the highest revenue and display the revenue generated in each month.
WITH monthly_revenue AS (
    SELECT
        DATE_FORMAT(payment_date, '%Y-%m') AS month,
        SUM(amount) AS total_revenue
    FROM payment
    GROUP BY month
)
SELECT
    month,
    total_revenue
FROM monthly_revenue
ORDER BY total_revenue DESC
LIMIT 5;
